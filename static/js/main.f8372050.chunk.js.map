{"version":3,"sources":["components/Message/Message.module.scss","common/Button/Button.module.scss","common/InputCheckbox/InputCheckbox.module.scss","common/InputText/InputText.module.scss","components/ShowRoom/ShowRoom.module.scss","components/Message/Message.tsx","common/Button/Button.tsx","common/InputCheckbox/InputCheckbox.tsx","components/Todolist/TodoList.tsx","common/InputText/InputText.tsx","components/HelloInput/HelloInput.tsx","components/ShowRoom/ShowRoom.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Message","props","className","s","bg","avatar","src","alt","block","wrapper","nickName","text","time","hours","minutes","Button","mode","btn","error","onClick","action","value","InputCheckBox","checkbox","checked","active","input","type","onChange","e","id","currentTarget","changeStatus","Todolist","title","tasks","map","task","key","titleTask","isDone","removeTask","changeFilter","InputText","inputText","inputValue","onKeyPress","actionEnter","HelloInput","HelloUser","inputState","alert","changeQuantity","toString","changeInputName","quantityUsers","length","SchowRoom","useState","setInputValue","setIsDone","status","App","priority","setTasks","filter","setFilter","setInput","usersHello","setUsersHello","tasksForTodolist","t","taskId","find","console","log","name","userName","newUsers","v1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f8372050.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bg\":\"Message_bg__1JJW5\",\"avatar\":\"Message_avatar__2Oa-t\",\"block\":\"Message_block__27Dpb\",\"nickName\":\"Message_nickName__1FhgC\",\"text\":\"Message_text__OTqzH\",\"time\":\"Message_time__1vBAC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3ioML\",\"error\":\"Button_error__1-CXm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputCheckbox_input__2dAhW\",\"checkbox\":\"InputCheckbox_checkbox__BEE4i\",\"active\":\"InputCheckbox_active__1cbDm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputText\":\"InputText_inputText__1skyF\",\"error\":\"InputText_error__29s8J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ShowRoom_wrapper__AwnXA\"};","import React from 'react';\nimport s from \"./Message.module.scss\"\n\ntype MessageType = {\n    nickName: string,\n    text: string,\n    avatar: string,\n    hours: number,\n    minutes: number\n}\n\nconst Message:React.FC<MessageType>= (props) => {\n    return(\n        <div className={s.bg}>\n            <img className={s.avatar} src={props.avatar} alt=\"avatar\"/>\n            <div className={s.block}>\n                <div className={s.wrapper}>\n                    <span className={s.nickName}>{props.nickName}</span>\n                    <span className={s.text}>{props.text}</span>\n                </div>\n                <div className={s.time}>{`${props.hours}:0${props.minutes}`}</div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Message","import React, {useState} from \"react\";\nimport s from \"./Button.module.scss\"\n\ntype ButtonTypeProps = {\n    value:string\n    action: ()=> void\n    mode?: \"red\"\n}\n\nexport const Button = (props:ButtonTypeProps) =>{\n\n    return(\n        <button\n            className={props.mode === \"red\" ? `${s.btn}  ${s.error}`:  s.btn}\n            onClick={props.action}>\n            {props.value}\n        </button>\n    );\n}","import React, {ChangeEvent} from \"react\";\nimport s from \"./InputCheckbox.module.scss\"\n\ntype inputCheckboxTypeProps = {\n    checked: boolean\n    changeStatus: (status: boolean, id: number) => void\n    value: string;\n    id?:number}\n\nexport const InputCheckBox = (props:inputCheckboxTypeProps) => {\n    const changeStatus = (e:ChangeEvent<HTMLInputElement>) => {\n        let id = props.id || +e.currentTarget.id;\n       props.changeStatus(e.currentTarget.checked,id);\n    }\n    return (\n        <>\n            <label className={`${s.checkbox} ${props.checked? s.active: \"\"}`}>\n                <input className={s.input} type=\"checkbox\" value={\"1\"} checked={props.checked} onChange={changeStatus}/>\n                <span >{props.value}</span>\n            </label>\n        </>\n    );\n}","import React, {ChangeEvent} from \"react\";\nimport {TasksType} from \"../../App\";\nimport {Button} from \"../../common/Button/Button\";\nimport {InputCheckBox} from \"../../common/InputCheckbox/InputCheckbox\";\n\ntype TodolistPropsType = {\n    title: string\n    tasks: Array<TasksType>\n    removeTask: (taskId: number) => void\n    changeFilter: (value: \"All\" | \"High\" | \"Middle\" | \"Low\") => void\n    changeStatus: (status: boolean, id: number) => void\n\n}\n\nexport function Todolist(props: TodolistPropsType) {\n\n    const changeFilterValueAll = () => { props.changeFilter(\"All\")};\n    const changeFilterValueHigh = () => { props.changeFilter(\"High\")};\n    const changeFilterValueMiddle = () => { props.changeFilter(\"Middle\")};\n    const changeFilterValueLow = () => { props.changeFilter(\"Low\")};\n    return (\n        <div className={\"wrapper\"}>\n            <h3>{props.title}</h3>\n            <ul>\n                {props.tasks.map(task => {\n                    return (\n                        <li key={task.id}>\n                            <InputCheckBox value={task.titleTask}\n                                           checked={task.isDone}\n                                           changeStatus={props.changeStatus}\n                                           id={task.id}/>\n                            <Button value={\"x\"} action={() => {\n                                props.removeTask(task.id)\n                            }}/>\n                        </li>\n                    );\n                })}\n\n            </ul>\n            <div>\n                <Button value={\"All\"} action={ changeFilterValueAll}/>\n                <Button value={\"High\"} action={ changeFilterValueHigh}/>\n                <Button value={\"Middle\"} action={ changeFilterValueMiddle}/>\n                <Button value={\"Low\"} action={ changeFilterValueLow}/>\n            </div>\n\n        </div>\n    );\n\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport s from \"./InputText.module.scss\"\n\ntype InputTextTypeProps = {\n    value: string\n    onChange: (inputValue: string) => void\n    actionEnter: () => void;\n    error?: boolean\n}\n\n\nexport const InputText = (props: InputTextTypeProps) => {\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n        let inputValue = e.currentTarget.value;\n        props.onChange(inputValue);\n    }\n\n    const actionEnter = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            props.actionEnter();\n        }\n\n    }\n    return (\n        <>\n            <input className={`${s.inputText} ${props.error && props.value !==\"\" ? s.error : \"\"}`}\n                   type=\"text\"\n                   value={props.value}\n                   onChange={onChange}\n                   onKeyPress={actionEnter}\n\n            />\n            <span>{}</span>\n        </>\n    );\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport {HelloUsersType} from \"../../App\";\nimport {Button} from \"../../common/Button/Button\";\nimport {InputText} from \"../../common/InputText/InputText\";\n\ntype InputNameProps = {\n    inputState: string\n    changeInputName: (name:string) => void;\n    quantityUsers: Array<HelloUsersType>\n    changeQuantity: (user:string)=> void\n}\n\nfunction HelloInput(props:InputNameProps) {\n\n\n    const onChange = (inputValue: string) => {\n        props.changeInputName(inputValue)\n    };\n\n\n function HelloUser() {\n      if(props.inputState !==\"\"){\n         alert(`Hello dear ${props.inputState}`);\n         props.changeQuantity(props.inputState.toString())\n\n     }\n\n    props.changeInputName(\"\")\n }\n\n function sendKeyPressEnter(e:KeyboardEvent<HTMLInputElement>) {\n    if(e.key === \"Enter\"){\n        HelloUser();\n    }\n }\n\n    return (\n        <>\n\n            <InputText value={props.inputState} onChange={onChange} actionEnter={ HelloUser}/>\n            <Button value={\"Hello\"} action={HelloUser}/>\n\n            <div>Quantity Users: <b>{props.quantityUsers.length}</b></div>\n\n        </>\n    );\n}\n\nexport default HelloInput;","import React, {ChangeEvent, useState} from \"react\";\nimport {InputText} from \"../../common/InputText/InputText\";\nimport {InputCheckBox} from \"../../common/InputCheckbox/InputCheckbox\";\nimport {Button} from \"../../common/Button/Button\";\nimport s from \"./ShowRoom.module.scss\"\n\n\nexport const SchowRoom = () => {\n    let [inputValue, setInputValue] = useState<string>(\"\");\n    let [isDone, setIsDone] = useState<boolean>(true)\n\n    const onChange = (inputValue: string) => {\n        setInputValue(inputValue)\n    };\n\n    const changeStatus = (status: boolean) => {\n        setIsDone(status)\n    }\n\n    const buttonAction = () => {\n        alert(\"Button work\");\n    }\n\n    const actionEnter = () => {\n        alert(\"Enter action\");\n        setInputValue(\"\");\n    }\n    return (\n        <div className={s.wrapper}>\n            <h3>1</h3>\n            <InputText value={inputValue} onChange={onChange} actionEnter={actionEnter} error={true}/>\n            <h3>2</h3>\n            <InputCheckBox checked={isDone} changeStatus={changeStatus} value={\"Name\"}/>\n            <h3>3</h3>\n            <Button value={\"Button\"} action={buttonAction} mode={\"red\"}/>\n        </div>\n    );\n}","import './App.scss';\nimport React, {useState} from \"react\";\nimport Message from \"./components/Message/Message\";\nimport {Todolist} from \"./components/Todolist/TodoList\";\nimport HelloInput from \"./components/HelloInput/HelloInput\";\nimport {v1} from \"uuid\";\nimport {SchowRoom} from \"./components/ShowRoom/ShowRoom\";\n\n\nexport type TasksType = {\n    id: number\n    titleTask: string\n    priority: string\n    isDone: boolean\n}\ntype FilterType = \"All\" | \"High\" | \"Middle\" | \"Low\";\n\nexport type HelloUsersType = {\n    id: string\n    name: string\n}\n\nfunction App() {\n    let [tasks, setTasks] = useState<Array<TasksType>>(\n        [\n            {id: 1, titleTask: \"Work\", priority: \"High\", isDone: true},\n            {id: 2, titleTask: \"Study\", priority: \"High\", isDone: true},\n            {id: 3, titleTask: \"Rest\", priority: \"Middle\", isDone: true},\n            {id: 4, titleTask: \"Movies\", priority: \"Low\", isDone: false},\n        ]\n    );\n    let [filter, setFilter] = useState<FilterType>(\"All\")\n\n    let [inputState, setInput] = useState(\"\");\n\n    let [usersHello, setUsersHello] = useState<Array<HelloUsersType>>([]);\n\n\n    function removeTask(taskId: number) {\n        tasks = tasks.filter((t: TasksType) => t.id !== taskId)\n        setTasks(tasks);\n    }\n\n    function changeFilter(value: \"All\" | \"High\" | \"Middle\" | \"Low\") {\n        setFilter(value)\n    }\n\n    function enterName(name: string) {\n        setInput(name);\n    }\n\n    function changeQuantityUsers(userName: string) {\n        let newUser: HelloUsersType = {id: v1(), name: userName};\n        let newUsers = [newUser, ...usersHello]\n        setUsersHello(newUsers)\n\n    }\n\n    const changeStatus = (status: boolean, id: number) => {\n        let task = tasks.find(t => t.id === id);\n        console.log(status, id)\n        if (task) {\n            task.isDone = status;\n            setTasks([...tasks]);\n        }\n    }\n\n\n    let tasksForTodolist = tasks;\n    if (filter === \"High\") {\n        tasksForTodolist = tasks.filter((t) => t.priority === \"High\");\n    }\n    if (filter === \"Middle\") {\n        tasksForTodolist = tasks.filter((t) => t.priority === \"Middle\");\n    }\n    if (filter === \"Low\") {\n        tasksForTodolist = tasks.filter((t) => t.priority === \"Low\");\n    }\n\n    return (\n        <div className=\"App\">\n            <h2>Home Task 1</h2>\n            <Message nickName={\"Artem\"}\n                     text={\"npm start нажимал?\"}\n                     avatar={\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS4XSv8zvv1XvIvvz8PFg8hRwUTQJjbis-CJg&usqp=CAU\"}\n                     hours={20}\n                     minutes={0}\n            />\n            <h2>Home Task 2</h2>\n            <Todolist title={\"To-do list\"}\n                      tasks={tasksForTodolist}\n                      removeTask={removeTask}\n                      changeFilter={changeFilter}\n                      changeStatus={changeStatus}\n\n\n            />\n            <h2>Home Task 3</h2>\n            <HelloInput inputState={inputState}\n                        changeInputName={enterName}\n                        quantityUsers={usersHello}\n                        changeQuantity={changeQuantityUsers}\n\n            />\n            <h2>Home Task 4</h2>\n            <SchowRoom/>\n\n\n        </div>\n\n\n    );\n}\n\nexport default App;\n// (TypeScript) домашка от меня №4:\n// - добавьте в проект домашек папку common - в ней мы будем хранить универсальные компоненты\n// <MyInput value={value} onChange={onChange}/> // это универсальная компонента\n// <Hello name={name} sayHello={sayHello}/> // это НЕ универсальная компонента, так как работает только с именами, ...на работе так же будут непонятные таски - научитесь спрашивать если что-то не понятно, иначе на работе будете страдать из-за необходимости всё переделывать за \"спасибо\" из-за того что вы не правильно поняли задание!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// - на работе часто вместо стандартных хтмл тегов используют готовые компоненты с красивыми стилями, нужно сделать 3 компоненты: инпут, чекбокс и кнопку\n// - эти компоненты должны быть УНИВЕРСАЛЬНЫМИ и иметь красивые стили (создать самому или найти в интернете)\n// - добавьте в проект компоненту, в которой отрисуйте эти универсальные компоненты для демонстрации\n// - замените в предыдущих домашках стандартные кнопки и инпуты вашими универсальными компонентами, в последующих домашках используйте свои универсальные компоненты вместо стандартных\n// задачи со звёздочками:\n//     * сделайте так чтоб onChange ваших компонент сразу давал нужное значение (value/checked), а не объект ивента\n// * добавьте в инпуту пропс для функции, которая будет выполняться по нажатию кнопки Enter\n// * добавьте в свою кнопку необязательный пропс для выбора типа кнопки: стандартный (выбран изначально) или красный (для кнопок удаления/отмены/выхода/...), стили для разных типов должны быть разные\n// * добавить необязательный пропс error в инпут, в случае передачи в него значения нужно менять стиль инпута на красный","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}